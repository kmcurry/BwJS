{
	"project" : "JSModeler",
	"modules" : {
		"Core" : {
			"functions" : {
				"IsZero" : {
					"description" : "Determines if the given value is near zero. Uses epsilon for comparison.",
					"parameters" : [
						["a", "number", "the value"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"IsPositive" : {
					"description" : "Determines if the given value is positive. Uses epsilon for comparison.",
					"parameters" : [
						["a", "number", "the value"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"IsNegative" : {
					"description" : "Determines if the given value is negative. Uses epsilon for comparison.",
					"parameters" : [
						["a", "number", "the value"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"IsLower" : {
					"description" : "Determines if a value is lower than an other. Uses epsilon for comparison.",
					"parameters" : [
						["a", "number", "first value"],
						["b", "number", "second value"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"IsGreater" : {
					"description" : "Determines if a value is greater than an other. Uses epsilon for comparison.",
					"parameters" : [
						["a", "number", "first value"],
						["b", "number", "second value"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"IsEqual" : {
					"description" : "Determines if two values are equal. Uses epsilon for comparison.",
					"parameters" : [
						["a", "number", "first value"],
						["b", "number", "second value"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"IsEqualWithEps" : {
					"description" : "Determines if two values are equal. Uses the given epsilon for comparison.",
					"parameters" : [
						["a", "number", "first value"],
						["b", "number", "second value"],
						["eps", "number", "epsilon value"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"IsLowerOrEqual" : {
					"description" : "Determines if a value is lower or equal to an other. Uses epsilon for comparison.",
					"parameters" : [
						["a", "number", "first value"],
						["b", "number", "second value"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"IsGreaterOrEqual" : {
					"description" : "Determines if a value is greater or equal to an other. Uses epsilon for comparison.",
					"parameters" : [
						["a", "number", "first value"],
						["b", "number", "second value"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"Minimum" : {
					"description" : "Returns the minimum of two values. Uses epsilon for comparison.",
					"parameters" : [
						["a", "number", "first value"],
						["b", "number", "second value"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"Maximum" : {
					"description" : "Returns the maximum of two values. Uses epsilon for comparison.",
					"parameters" : [
						["a", "number", "first value"],
						["b", "number", "second value"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"ArcSin" : {
					"description" : "Calculates the arcus sinus value.",
					"parameters" : [
						["value", "number", "the value"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"ArcCos" : {
					"description" : "Calculates the arcus cosinus value.",
					"parameters" : [
						["value", "number", "the value"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"RandomNumber" : {
					"description" : "Generates a random number between two numbers.",
					"parameters" : [
						["from", "number", "lowest random result"],
						["to", "number", "highest random result"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"RandomInt" : {
					"description" : "Generates a random integer between two integers.",
					"parameters" : [
						["from", "integer", "lowest random result"],
						["to", "integer", "highest random result"]
					],
					"returns" : [
						["integer", "the result"]
					]
				},
				"SeededRandomInt" : {
					"description" : "Generates a random integer between two integers. A seed number can be specified.",
					"parameters" : [
						["from", "integer", "lowest random result"],
						["to", "integer", "highest random result"],
						["seed", "integer", "seed value"]
					],
					"returns" : [
						["integer", "the result"]
					]
				},
				"ValueOrDefault" : {
					"description" : "Returns the given value, or a default if it is undefined.",
					"parameters" : [
						["val", "anything", "new value"],
						["def", "anything", "default value"]
					],
					"returns" : [
						["anything", "the result"]
					]
				},
				"Assert" : {
					"description" : "Shows up an alert with the given message if the condition is false.",
					"parameters" : [
						["condition", "boolean", "the condition to check"],
						["message", "string", "error message"]
					]
				},
				"BubbleSort" : {
					"description" : "Sorts an array with bubble sort.",
					"parameters" : [
						["array", "anything[]", "the array to sort"],
						["compare", "function", "the compare function"]
					]
				},
				"AsyncRunTask" : {
					"description" : "Calls a function multiple times asynchronously. If the environment is not specified, it will run synchronously.",
					"parameters" : [
						["taskFunction", "function", "the function to run"],
						["environment", "AsyncEnvironment", "environment with callbackss"],
						["runCount", "integer", "the count of runs"],
						["timeout", "integer", "the timeout between runs"],
						["userData", "anything", "task specific data"]
					]
				}
			},
			"classes" : {
				"Timer" : {
					"description" : "Utility class for time measure.",
					"functions" : {
						"Start" : {
							"description" : "Starts the timer."
						},
						"Stop" : {
							"description" : "Stops the timer."
						},
						"Result" : {
							"description" : "Returns the time between start and stop.",
							"returns" : [
								["number", "The result."]
							]
						}
					}
				},
				"FPSCounter" : {
					"description" : "Utility class for FPS count. It calculates the frames and returns FPS count for the last interval with the given length. The Get function should called in every frame.",
					"functions" : {
						"Get" : {
							"description" : "Returns the FPS count for the last interval with the given length.",
							"parameters" : [
								["interval", "integer", "the interval length in milliseconds"]
							],
							"returns" : [
								["integer", "The result."]
							]
						}
					}
				},
				"AsyncEnvironment" : {
					"description" : "Environment for asynchronous calls.",
					"parameters" : [
						["parameters", "object", "callback functions for calls"]
					],
					"functions" : {
						"OnStart" : {
							"description" : "Calls the onStart callback of the environment.",
							"parameters" : [
								["taskCount", "integer", "count of all tasks"],
								["userData", "anything", "task specific data"]
							]
						},
						"OnProcess" : {
							"description" : "Calls the onProcess callback of the environment.",
							"parameters" : [
								["currentTask", "integer", "number of the current task"],
								["userData", "anything", "task specific data"]
							]
						},
						"OnFinish" : {
							"description" : "Calls the onFinish callback of the environment.",
							"parameters" : [
								["result", "anything", "the result of the operation"],
								["userData", "anything", "task specific data"]
							]
						}
					}
				}
			}
		},
		"Geometry" : {
			"functions" : {
				"MatrixDeterminant2x2" : {
					"description" : "Calculates the determinant of a 2x2 matrix.",
					"parameters" : [
						["m00..m11", "4 numbers", "the matrix values"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"MatrixDeterminant3x3" : {
					"description" : "Calculates the determinant of a 3x3 matrix.",
					"parameters" : [
						["m00..m22", "9 numbers", "the matrix values"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"MatrixDeterminant4x4" : {
					"description" : "Calculates the determinant of a 4x4 matrix.",
					"parameters" : [
						["m00..m33", "16 numbers", "the matrix values"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"CoordFromArray2D" : {
					"description" : "Returns a coordinate from an array of components.",
					"parameters" : [
						["array", "number[2]", "the array of components"]
					],
					"returns" : [
						["Coord2D", "the result"]
					]
				},
				"CoordFromArray" : {
					"description" : "Returns a coordinate from an array of components.",
					"parameters" : [
						["array", "number[3]", "the array of components"]
					],
					"returns" : [
						["Coord", "the result"]
					]
				},
				"CoordIsEqual2D" : {
					"description" : "Determines if the given coordinates are equal.",
					"parameters" : [
						["a", "Coord2D", "the first coordinate"],
						["b", "Coord2D", "the second coordinate"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"CoordIsEqual2DWithEps" : {
					"description" : "Determines if the given coordinates are equal. Uses the given epsilon for comparison.",
					"parameters" : [
						["a", "Coord2D", "the first coordinate"],
						["b", "Coord2D", "the second coordinate"],
						["eps", "number", "the epsilon value"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"CoordDistance2D" : {
					"description" : "Calculates the distance of two coordinates.",
					"parameters" : [
						["a", "Coord2D", "the first coordinate"],
						["b", "Coord2D", "the second coordinate"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"MidCoord2D" : {
					"description" : "Calculates the coordinate in the middle of two coordinates.",
					"parameters" : [
						["a", "Coord2D", "the first coordinate"],
						["b", "Coord2D", "the second coordinate"]
					],
					"returns" : [
						["Coord2D", "the result"]
					]
				},
				"PolarToCartesian" : {
					"description" : "Converts a polar coordinate to a cartesian coordinate.",
					"parameters" : [
						["radius", "number", "the radius component"],
						["theta", "number", "the angle component"]
					],
					"returns" : [
						["Coord2D", "the result"]
					]
				},
				"GetArcLengthFromAngle" : {
					"description" : "Calculates arc length from radius and angle.",
					"parameters" : [
						["radius", "number", "the radius of the circle"],
						["theta", "number", "the angle of rotation"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"GetAngleFromArcLength" : {
					"description" : "Calculates angle from arc length.",
					"parameters" : [
						["radius", "number", "the radius of the circle"],
						["arcLength", "number", "the arc length"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"CoordTurnType2D" : {
					"description" : "Calculates the turn type of three coordinates.",
					"parameters" : [
						["a", "Coord2D", "the first coordinate"],
						["b", "Coord2D", "the second coordinate"],
						["c", "Coord2D", "the third coordinate"]
					],
					"returns" : [
						["string", "'CounterClockwise', 'Clockwise', or 'Collinear'"]
					]
				},
				"CoordIsEqual" : {
					"description" : "Determines if the given coordinates are equal.",
					"parameters" : [
						["a", "Coord", "first coordinate"],
						["b", "Coord", "second coordinate"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"CoordIsEqualWithEps" : {
					"description" : "Determines if the given coordinates are equal. Uses the given epsilon for comparison.",
					"parameters" : [
						["a", "Coord", "first coordinate"],
						["b", "Coord", "second coordinate"],
						["eps", "number", "epsilon value"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"SphericalCoordIsEqual" : {
					"description" : "Determines if the given coordinates are equal.",
					"parameters" : [
						["a", "SpericalCoord", "first coordinate"],
						["b", "SpericalCoord", "second coordinate"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"CoordDistance" : {
					"description" : "Calculates the distance of two coordinates.",
					"parameters" : [
						["a", "Coord", "first coordinate"],
						["b", "Coord", "second coordinate"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"CoordSignedDistance" : {
					"description" : "Calculates the distance of two coordinates along a direction vector.",
					"parameters" : [
						["a", "Coord", "first coordinate"],
						["b", "Coord", "second coordinate"],
						["direction", "Vector", "direction vector"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"MidCoord" : {
					"description" : "Calculates the coordinate in the middle of two coordinates.",
					"parameters" : [
						["a", "Coord", "first coordinate"],
						["b", "Coord", "second coordinate"]
					],
					"returns" : [
						["Coord", "the result"]
					]
				},
				"VectorMultiply" : {
					"description" : "Multiplies a vector with a scalar.",
					"parameters" : [
						["vector", "Vector", "the vector"],
						["scalar", "number", "the scalar"]
					],
					"returns" : [
						["Vector", "the result"]
					]
				},
				"VectorDot" : {
					"description" : "Calculates the dot product of two vectors.",
					"parameters" : [
						["a", "Vector", "the first vector"],
						["b", "Vector", "the second vector"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"VectorCross" : {
					"description" : "Calculates the cross product of two vectors.",
					"parameters" : [
						["a", "Vector", "the first vector"],
						["b", "Vector", "the second vector"]
					],
					"returns" : [
						["Vector", "the result"]
					]
				},
				"VectorLength" : {
					"description" : "Calculates length of a vector.",
					"parameters" : [
						["vector", "Vector", "the vector"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"VectorNormalize" : {
					"description" : "Normalize a vector.",
					"parameters" : [
						["vector", "Vector", "the vector"]
					],
					"returns" : [
						["Vector", "the result"]
					]
				},
				"VectorSetLength" : {
					"description" : "Sets the length of a vector.",
					"parameters" : [
						["vector", "Vector", "the vector"],
						["length", "number", "the length"]
					],
					"returns" : [
						["Vector", "the result"]
					]
				},
				"GetVectorsAngle" : {
					"description" : "Calculates the angle of two vectors.",
					"parameters" : [
						["a", "Vector", "the first vector"],
						["b", "Vector", "the second vector"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"GetVectorsFullAngle" : {
					"description" : "Calculates the full angle (0 to pi) of two vectors with the given normal vector.",
					"parameters" : [
						["a", "Vector", "the first vector"],
						["b", "Vector", "the second vector"],
						["normal", "Vector", "the normal vector"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"VectorsAreCollinear" : {
					"description" : "Determines if two vectors are collinear.",
					"parameters" : [
						["a", "Vector", "the first vector"],
						["b", "Vector", "the second vector"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"CoordAdd" : {
					"description" : "Adds two coordinates.",
					"parameters" : [
						["a", "Coord", "the first coordinate"],
						["b", "Coord", "the second coordinate"]
					],
					"returns" : [
						["Coord", "the result"]
					]
				},
				"CoordSub" : {
					"description" : "Subs two coordinates.",
					"parameters" : [
						["a", "Coord", "the first coordinate"],
						["b", "Coord", "the second coordinate"]
					],
					"returns" : [
						["Coord", "the result"]
					]
				},
				"CoordOffset" : {
					"description" : "Offsets a coordinate.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["direction", "Vector", "the direction of the offset"],
						["distance", "number", "the distance of the offset"]
					],
					"returns" : [
						["Coord", "the result"]
					]
				},
				"CoordRotate" : {
					"description" : "Rotates a coordinate.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["axis", "Vector", "the axis of the rotation"],
						["angle", "number", "the angle of the rotation"],
						["origo", "Coord", "the origo of the rotation"]
					],
					"returns" : [
						["Coord", "the result"]
					]
				},
				"GetCoord2DFromCoord" : {
					"description" : "Transforms a 3D coordinate to a 2D coordinate.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["origo", "Coord", "the origo of transformation"],
						["normal", "Vector", "the normal vector of transformation"]
					],
					"returns" : [
						["Coord2D", "the result"]
					]
				},
				"CoordTurnType" : {
					"description" : "Calculates the turn type of three coordinates.",
					"parameters" : [
						["a", "Coord", "the first coordinate"],
						["b", "Coord", "the second coordinate"],
						["c", "Coord", "the third coordinate"],
						["normal", "Vector", "normal vector for calculation"]
					],
					"returns" : [
						["string", "'CounterClockwise', 'Clockwise', or 'Collinear'"]
					]
				},
				"CalculateCentroid" : {
					"description" : "Calculates center points of the given coordinates.",
					"parameters" : [
						["coords", "Coord[*]", "the array of coordinates"]
					],
					"returns" : [
						["Coord", "the result"]
					]
				},
				"CalculateTriangleNormal" : {
					"description" : "Calculates normal vector for the given triangle vertices.",
					"parameters" : [
						["v0", "Coord", "the first vertex of the triangle"],
						["v1", "Coord", "the second vertex of the triangle"],
						["v2", "Coord", "the third vertex of the triangle"]
					],
					"returns" : [
						["Vector", "the result"]
					]
				},
				"CalculateNormal" : {
					"description" : "Calculates normal vector for the given coordinates.",
					"parameters" : [
						["coords", "Coord[*]", "the array of coordinates"]
					],
					"returns" : [
						["Vector", "the result"]
					]
				},
				"SphericalToCartesian" : {
					"description" : "Converts a spherical coordinate to a cartesian coordinate.",
					"parameters" : [
						["radius", "number", "the radius component"],
						["theta", "number", "the angle component"],
						["phi", "number", "the phi component"]
					],
					"returns" : [
						["Coord", "the result"]
					]
				},
				"CartesianToSpherical" : {
					"description" : "Converts a cartesian coordinate to a spherical coordinate.",
					"parameters" : [
						["x", "number", "the x component"],
						["y", "number", "the y component"],
						["z", "number", "the z component"]
					],
					"returns" : [
						["SphericalCoord", "the result"]
					]
				},
				"SphericalToCartesianWithOrigo" : {
					"description" : "Converts a spherical coordinate to a cartesian coordinate with the given origo.",
					"parameters" : [
						["spherical", "SphericalCoord", "the coordinate"],
						["origo", "Coord", "the origo"]
					],
					"returns" : [
						["Coord", "the result"]
					]
				},
				"CartesianToSphericalWithOrigo" : {
					"description" : "Converts a cartesian coordinate to a spherical coordinate with the given origo.",
					"parameters" : [
						["cartesian", "Coord", "the coordinate"],
						["origo", "Coord", "the origo"]
					],
					"returns" : [
						["SphericalCoord", "the result"]
					]
				},
				"MoveCoordOnSphere" : {
					"description" : "Moves a coordinate on a surface of a sphere with the given angles.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["origo", "Coord", "the origo"],
						["thetaAngle", "number", "the theta angle"],
						["phiAngle", "number", "the phi angle"]
					],
					"returns" : [
						["Coord", "the result"]
					]
				},
				"CylindricalToCartesian" : {
					"description" : "Converts a cylindrical coordinate to a cartesian coordinate.",
					"parameters" : [
						["radius", "number", "the radius component"],
						["height", "number", "the height component"],
						["theta", "number", "the theta component"]
					],
					"returns" : [
						["Coord", "the result"]
					]
				},
				"GetArcLength" : {
					"description" : "Calculates arc length between two vectors.",
					"parameters" : [
						["a", "Vector", "the first vector"],
						["b", "Vector", "the second vector"],
						["radius", "number", "the radius component"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"GetFullArcLength" : {
					"description" : "Calculates arc length between two vectors with the given normal vector.",
					"parameters" : [
						["a", "Vector", "the first vector"],
						["b", "Vector", "the second vector"],
						["radius", "number", "the radius component"],
						["normal", "Vector", "the normal vector"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"MatrixIdentity" : {
					"description" : "Generates an identity matrix.",
					"returns" : [
						["number[16]", "the result matrix"]
					]
				},
				"MatrixClone" : {
					"description" : "Clones a matrix.",
					"parameters" : [
						["matrix", "number[16]", "the source matrix"]
					],
					"returns" : [
						["number[16]", "the result matrix"]
					]
				},
				"MatrixTranspose" : {
					"description" : "Transposes a matrix.",
					"parameters" : [
						["matrix", "number[16]", "the source matrix"]
					],
					"returns" : [
						["number[16]", "the result matrix"]
					]
				},
				"MatrixVectorMultiply" : {
					"description" : "Multiplies a matrix with a vector.",
					"parameters" : [
						["matrix", "number[16]", "the matrix"],
						["vector", "number[4]", "the vector"]
					],
					"returns" : [
						["number[4]", "the result vector"]
					]
				},
				"MatrixMultiply" : {
					"description" : "Multiplies a two matrices.",
					"parameters" : [
						["matrix1", "number[16]", "first matrix"],
						["matrix2", "number[16]", "second matrix"]
					],
					"returns" : [
						["number[16]", "the result matrix"]
					]
				},
				"MatrixDeterminant" : {
					"description" : "Calculates the determinant of a matrix.",
					"parameters" : [
						["matrix", "number[16]", "the source matrix"]
					],
					"returns" : [
						["number", "the determinant"]
					]
				},
				"MatrixInvert" : {
					"description" : "Inverts a matrix.",
					"parameters" : [
						["matrix", "number[16]", "the source matrix"]
					],
					"returns" : [
						["number[16]", "the result matrix"]
					]
				},
				"MatrixTranslation" : {
					"description" : "Creates a translation matrix.",
					"parameters" : [
						["x", "number", "x offset of the transformation"],
						["y", "number", "y offset of the transformation"],
						["z", "number", "z offset of the transformation"]
					],
					"returns" : [
						["number[16]", "the result matrix"]
					]
				},
				"MatrixRotation" : {
					"description" : "Creates a rotation matrix around the given axis.",
					"parameters" : [
						["axis", "Vector", "the axis of the rotation"],
						["angle", "number", "the angle of the rotation"],
						["origo", "Coord", "the origo of the rotation"]
					],
					"returns" : [
						["number[16]", "the result matrix"]
					]
				},
				"MatrixRotationQuaternion" : {
					"description" : "Creates a rotation matrix from a given quaternion.",
					"parameters" : [
						["quaternion", "number[4]", "the quaternion"]
					],
					"returns" : [
						["number[16]", "the result matrix"]
					]
				},
				"MatrixRotationX" : {
					"description" : "Creates a rotation matrix around the x axis.",
					"parameters" : [
						["angle", "number", "the angle of rotation"]
					],
					"returns" : [
						["number[16]", "the result matrix"]
					]
				},
				"MatrixRotationY" : {
					"description" : "Creates a rotation matrix around the y axis.",
					"parameters" : [
						["angle", "number", "the angle of rotation"]
					],
					"returns" : [
						["number[16]", "the result matrix"]
					]
				},
				"MatrixRotationZ" : {
					"description" : "Creates a rotation matrix around the z axis.",
					"parameters" : [
						["angle", "number", "the angle of rotation"]
					],
					"returns" : [
						["number[16]", "the result matrix"]
					]
				},
				"MatrixView" : {
					"description" : "Creates a view matrix.",
					"parameters" : [
						["eye", "Coord", "eye position"],
						["center", "Coord", "center position"],
						["up", "Vector", "up vector"]
					],
					"returns" : [
						["number[16]", "the result matrix"]
					]
				},
				"MatrixPerspective" : {
					"description" : "Creates a perspective matrix.",
					"parameters" : [
						["fieldOfView", "number", "field of view"],
						["aspectRatio", "number", "aspect ratio"],
						["nearPlane", "number", "near clipping plane"],
						["farPlane", "number", "far clipping plane"]
					],
					"returns" : [
						["number[16]", "the result matrix"]
					]
				},
				"ApplyTransformation" : {
					"description" : "Applies a matrix transformation to a coordinate.",
					"parameters" : [
						["matrix", "number[16]", "the matrix"],
						["coord", "Coord", "the coordinate"]
					],
					"returns" : [
						["Coord", "the result"]
					]
				},
				"CoordSystemToDirectionVectors" : {
					"description" : "Converts coordinate system vectors to origo relative direction vectors.",
					"parameters" : [
						["system", "CoordSystem", "the coordinate system"]
					],
					"returns" : [
						["CoordSystem", "the result"]
					]
				},
				"CoordSystemToAbsoluteCoords" : {
					"description" : "Converts coordinate system vectors to absolute coordinates.",
					"parameters" : [
						["system", "CoordSystem", "the coordinate system"]
					],
					"returns" : [
						["CoordSystem", "the result"]
					]
				},
				"ChangeCoordSystem" : {
					"description" : "Converts a coordinate from one coordinate system to another.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["from", "CoordSystem", "first coordinate system"],
						["to", "CoordSystem", "second coordinate system"]
					],
					"returns" : [
						["Coord", "the result"]
					]
				},
				"CoordSectorPosition2D" : {
					"description" : "Calculates the position of a coordinate and a sector.",
					"parameters" : [
						["coord", "Coord2D", "the coordinate"],
						["sector", "Sector2D", "the sector"]
					],
					"returns" : [
						["string", "'CoordOnSectorEndCoord', 'CoordOutsideOfSector', or 'CoordInsideOfSector'"]
					]
				},
				"SectorSectorPosition2D" : {
					"description" : "Calculates the position of two sectors.",
					"parameters" : [
						["aSector", "Sector2D", "the first sector"],
						["bSector", "Sector2D", "the second sector"]
					],
					"returns" : [
						["string", "'SectorsIntersectsCoincident', 'SectorsIntersectsEndPoint', 'SectorsIntersectsOnePoint', or 'SectorsDontIntersects'"]
					]
				},
				"GetSectorSegmentation" : {
					"description" : "Returns the segmented coordinates of a sector.",
					"parameters" : [
						["sector", "Sector", "the sector"],
						["segmentation", "integer", "the segmentation"],
						["coords", "Coord[*]", "(out) the result coordinates"]
					]
				},
				"CoordLinePosition2D" : {
					"description" : "Calculates the position of a coordinate and a line.",
					"parameters" : [
						["coord", "Coord2D", "the coordinate"],
						["line", "Line2D", "the line"]
					],
					"returns" : [
						["string", "'CoordAtLineLeft', 'CoordAtLineRight', or 'CoordOnLine'"]
					]
				},
				"CoordLinePosition" : {
					"description" : "Calculates the position of a coordinate and a line.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["line", "Line", "the line"]
					],
					"returns" : [
						["string", "'CoordOutsideOfLine', or 'CoordOnLine'"]
					]
				},
				"ProjectCoordToLine" : {
					"description" : "Projects a coordinate to a line.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["line", "Line", "the line"]
					],
					"returns" : [
						["Coord", "the projected coordinate"]
					]
				},
				"LineLineClosestPoint" : {
					"description" : "Calculates the closest points between two lines.",
					"parameters" : [
						["aLine", "Line", "first line"],
						["bLine", "Line", "second line"],
						["aClosestPoint", "Coord", "(out) the closest point on first line"],
						["bClosestPoint", "Coord", "(out) the closest point on second line"]
					],
					"returns" : [
						["boolean", "success"]
					]
				},
				"LineLinePosition" : {
					"description" : "Calculates the position of two lines.",
					"parameters" : [
						["aLine", "Line", "first line"],
						["bLine", "Line", "second line"],
						["intersection", "Coord", "(out) the intersection point if it exists"]
					],
					"returns" : [
						["string", "'LinesIntersectsCoincident', 'LinesIntersectsOnePoint', or 'LinesDontIntersects'"]
					]
				},
				"IdentityTransformation" : {
					"description" : "Generates an identity transformation.",
					"returns" : [
						["Transformation", "the result"]
					]
				},
				"TranslationTransformation" : {
					"description" : "Generates a translation transformation.",
					"parameters" : [
						["translation", "Vector", "the translation vector"]
					],
					"returns" : [
						["Transformation", "the result"]
					]
				},
				"OffsetTransformation" : {
					"description" : "Generates an offset transformation.",
					"parameters" : [
						["direction", "Vector", "the direction of the offset"],
						["distance", "number", "the distance of the offset"]
					],
					"returns" : [
						["Transformation", "the result"]
					]
				},
				"RotationTransformation" : {
					"description" : "Generates a rotation transformation.",
					"parameters" : [
						["axis", "Vector", "the axis of the rotation"],
						["angle", "number", "the angle of the rotation"],
						["origo", "Coord", "the origo of the rotation"]
					],
					"returns" : [
						["Transformation", "the result"]
					]
				},
				"RotationXTransformation" : {
					"description" : "Generates a rotation transformation around the x axis.",
					"parameters" : [
						["angle", "number", "the angle of the rotation"],
						["origo", "Coord", "the origo of the rotation"]
					],
					"returns" : [
						["Transformation", "the result"]
					]
				},
				"RotationYTransformation" : {
					"description" : "Generates a rotation transformation around the y axis.",
					"parameters" : [
						["angle", "number", "the angle of the rotation"],
						["origo", "Coord", "the origo of the rotation"]
					],
					"returns" : [
						["Transformation", "the result"]
					]
				},
				"RotationZTransformation" : {
					"description" : "Generates a rotation transformation around the z axis.",
					"parameters" : [
						["angle", "number", "the angle of the rotation"],
						["origo", "Coord", "the origo of the rotation"]
					],
					"returns" : [
						["Transformation", "the result"]
					]
				},
				"RotationXYZTransformation" : {
					"description" : "Generates a rotation transformation around all axis in x, y, z order.",
					"parameters" : [
						["xAngle", "number", "the x angle of the rotation"],
						["yAngle", "number", "the y angle of the rotation"],
						["zAngle", "number", "the z angle of the rotation"],
						["origo", "Coord", "the origo of the rotation"]
					],
					"returns" : [
						["Transformation", "the result"]
					]
				},
				"GetPlaneFromCoordAndDirection" : {
					"description" : "Generates a plane from a coordinate and a direction.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["direction", "Vector", "the direction"]
					],
					"returns" : [
						["Plane", "the result"]
					]
				},
				"GetPlaneFromThreeCoords" : {
					"description" : "Generates a plane from three coordinates.",
					"parameters" : [
						["a", "Coord", "the first coordinate"],
						["b", "Coord", "the second coordinate"],
						["c", "Coord", "the third coordinate"]
					],
					"returns" : [
						["Plane", "the result"]
					]
				},
				"CoordPlanePosition" : {
					"description" : "Calculates the position of a coordinate and a plane.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["plane", "Plane", "the plane"]
					],
					"returns" : [
						["string", "'CoordInFrontOfPlane', 'CoordAtBackOfPlane', or 'CoordOnPlane'"]
					]
				},
				"LinePlanePosition" : {
					"description" : "Calculates the position of a line and a plane.",
					"parameters" : [
						["line", "Line", "the line"],
						["plane", "Plane", "the plane"],
						["intersection", "Coord", "(out) the intersection point if it exists"]
					],
					"returns" : [
						["string", "'LineParallelToPlane', or 'LineIntersectsPlane'"]
					]
				},
				"LinePlaneIntersection" : {
					"description" : "Calculates the intersection point of a line and a plane.",
					"parameters" : [
						["line", "Line", "the line"],
						["plane", "Plane", "the plane"]
					],
					"returns" : [
						["Coord", "the result"]
					]
				},
				"CoordPlaneSignedDistance" : {
					"description" : "Calculates the signed distance of a coordinate and a plane.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["plane", "Plane", "the plane"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"CoordPlaneDistance" : {
					"description" : "Calculates the distance of a coordinate and a plane.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["plane", "Plane", "the plane"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"CoordPlaneSignedDirectionalDistance" : {
					"description" : "Calculates the signed distance of a coordinate and a plane along a direction vector.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["direction", "Vector", "the direction"],
						["plane", "Plane", "the plane"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"CoordPlaneDirectionalDistance" : {
					"description" : "Calculates the distance of a coordinate and a plane along a direction vector.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["direction", "Vector", "the direction"],
						["plane", "Plane", "the plane"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"ProjectCoordToPlane" : {
					"description" : "Projects a coordinate to a plane.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["plane", "Plane", "the plane"]
					],
					"returns" : [
						["Coord", "the projected coordinate"]
					]
				},
				"Project" : {
					"description" : "Projects a 3D coordinate to a 2D image.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["eye", "Coord", "the eye of the camera"],
						["center", "Coord", "the center of the camera"],
						["up", "Vector", "the up vector of the camera"],
						["fieldOfView", "number", "camera field of view"],
						["aspectRatio", "number", "aspect ratio of the desired image"],
						["nearPlane", "number", "near cutting plane distance"],
						["farPlane", "number", "far cutting plane distance"],
						["viewPort", "number[4]", "view port coordinates in pixels"]
					],
					"returns" : [
						["Coord", "the result"]
					]
				},
				"ConvexHull2D" : {
					"description" : "Calculates the 2D convex hull from the given coordinates.",
					"parameters" : [
						["coords", "Coord2D[*]", "the coordinate array"]
					],
					"returns" : [
						["Coord2D[*]", "coordinate array of the convex hull"]
					]
				},
				"ConvexHull3D" : {
					"description" : "Calculates the 3D convex hull from the given coordinates. The result defines convex hull triangles as an array of arrays with three coordinates.",
					"parameters" : [
						["coords", "Coord[*]", "the coordinate array"]
					],
					"returns" : [
						["Coord[3][*]", "the result"]
					]
				},
				"CreatePolygonFromVertices" : {
					"description" : "Creates a cloned polygon from the given vertices.",
					"parameters" : [
						["vertices", "Coord2D[*]", "the vertices"]
					],
					"returns" : [
						["Polygon2D", "the result"]
					]
				},
				"PolygonSignedArea2D" : {
					"description" : "Calculates the signed area of a polygon. The result is positive if the polygon has counter clockwise orientation, negative if it has clockwise orientation.",
					"parameters" : [
						["polygon", "Polygon2D", "the polygon"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"PolygonArea2D" : {
					"description" : "Calculates the area of a polygon.",
					"parameters" : [
						["polygon", "Polygon2D", "the polygon"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"PolygonOrientation2D" : {
					"description" : "Calculates the orientation of a polygon.",
					"parameters" : [
						["polygon", "Polygon2D", "the polygon"]
					],
					"returns" : [
						["string", "'CounterClockwise', 'Clockwise', or 'Invalid'"]
					]
				},
				"ChangePolygonOrientation2D" : {
					"description" : "Reverses the orientation of a polygon.",
					"parameters" : [
						["polygon", "Polygon2D", "the polygon"]
					]
				},
				"CreateCCWPolygonFromVertices" : {
					"description" : "Creates a cloned polygon from the given vertices with couter clockwise orientation.",
					"parameters" : [
						["vertices", "Coord2D[*]", "the vertices"]
					],
					"returns" : [
						["Polygon2D", "the result"]
					]
				},
				"PolygonComplexity2D" : {
					"description" : "Calculates the complexity of a polygon.",
					"parameters" : [
						["polygon", "Polygon2D", "the polygon"]
					],
					"returns" : [
						["string", "'Concave', 'Convex', or 'Invalid'"]
					]
				},
				"CoordPolygonPosition2D" : {
					"description" : "Calculates the position of a coordinate and a polygon.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["polygon", "Polygon2D", "the polygon"]
					],
					"returns" : [
						["string", "'CoordOutsideOfPolygon', 'CoordInsideOfPolygon', or 'CoordOnPolygonEdge'"]
					]
				},
				"SectorIntersectsPolygon2D" : {
					"description" : "Determines if a sector intersects a polygon. The sides next to the starting and ending vertices will be skipped. To avoid this, give -1 for these values.",
					"parameters" : [
						["polygon", "Polygon2D", "the polygon"],
						["sector", "Sector2D", "the sector"],
						["from", "integer", "index of starting vertex"],
						["end", "integer", "index of ending vertex"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"IsPolygonVertexVisible2D" : {
					"description" : "Determines if a polygons vertex is visible from an another vertex. It means that the sector between the vertices does not intersects any side of the polygon and the sector lies fully inside the polygon.",
					"parameters" : [
						["polygon", "Polygon2D", "the polygon"],
						["from", "integer", "index of starting vertex"],
						["end", "integer", "index of ending vertex"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"CreatePolygonWithHole2D" : {
					"description" : "Creates a simple polygon from multiple contours by creating in-out edges between contours. The input array should contain null values at contour ends.",
					"parameters" : [
						["vertices", "Coord2D[*]", "array of contour vertices with null values at contour ends"]
					],
					"returns" : [
						["Coord2D[*]", "the result"]
					]
				},
				"PolygonTriangulate2D" : {
					"description" : "Triangulates a polygon. The result defines triangles as an array of arrays with three original vertex indices.",
					"parameters" : [
						["polygon", "Polygon2D", "the polygon"]
					],
					"returns" : [
						["integer[3][*]", "the result"]
					]
				},
				"CheckTriangulation2D" : {
					"description" : "Checks a triangulation created with PolygonTriangulate2D. It checks if the area of triangles equal to the area of the original polygon.",
					"parameters" : [
						["polygon", "Polygon2D", "the polygon"],
						["triangles", "integer[3][*]", "the triangulation"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"CreatePolygonWithHole" : {
					"description" : "Creates a simple polygon from multiple contours by creating in-out edges between contours. The input array should contain null values at contour ends.",
					"parameters" : [
						["vertices", "Coord[*]", "array of contour vertices with null values at contour ends"]
					],
					"returns" : [
						["Coord[*]", "the result"]
					]
				},
				"PolygonTriangulate" : {
					"description" : "Triangulates a polygon. The result defines triangles as an array of arrays with three original vertex indices.",
					"parameters" : [
						["polygon", "Polygon", "the polygon"]
					],
					"returns" : [
						["integer[3][*]", "the result"]
					]
				},
				"OffsetPolygonContour" : {
					"description" : "Offsets all vertices of a polygon.",
					"parameters" : [
						["polygon", "Polygon", "the polygon"],
						["width", "number", "the width of the offset"]
					],
					"returns" : [
						["Polygon", "the result"]
					]
				},
				"CutPolygonWithPlane" : {
					"description" : "Cuts a polygon with a plane. The result array contains cutted polygons grouped by their position to the plane.",
					"parameters" : [
						["polygon", "Polygon", "the polygon"],
						["plane", "Plane", "the plane"],
						["frontPolygons", "Polygon[*]", "(out) polygons in front of the plane"],
						["backPolygons", "Polygon[*]", "(out) polygons at the back of the plane"],
						["planePolygons", "Polygon[*]", "(out) polygons on the plane"]
					],
					"returns" : [
						["boolean", "success"]
					]
				},
				"ClipPolygonWithBSPTree" : {
					"description" : "Clips a polygon with a created BSP tree.",
					"parameters" : [
						["polygon", "Polygon", "the polygon"],
						["bspTree", "BSPTree", "the BSP tree"],
						["frontPolygons", "Polygon[*]", "(out) polygons in front of the tree"],
						["backPolygons", "Polygon[*]", "(out) polygons at the back of the tree"],
						["planarFrontPolygons", "Polygon[*]", "(out) polygons on the tree looks front"],
						["planarBackPolygons", "Polygon[*]", "(out) polygons on the tree looks back"]
					],
					"returns" : [
						["boolean", "success"]
					]
				},
				"GetGaussianCParameter" : {
					"description" : "Calculates the gaussian functions c parameter which can be used for the gaussian function to reach epsilon at a given value.",
					"parameters" : [
						["x", "number", "the value"],
						["a", "number", "the a parameter of the function"],
						["b", "number", "the b parameter of the function"],
						["epsilon", "number", "the epsilon value"]
					],
					"returns" : [
						["number", "the c parameter of the function"]
					]
				},
				"GetGaussianValue" : {
					"description" : "Calculates the gaussian functions value.",
					"parameters" : [
						["x", "number", "the value"],
						["a", "number", "the a parameter of the function"],
						["b", "number", "the b parameter of the function"],
						["c", "number", "the c parameter of the function"]
					],
					"returns" : [
						["number", "the result"]
					]
				},
				"GenerateCirclePoints" : {
					"description" : "Generates coordinates on circle.",
					"parameters" : [
						["radius", "number", "the radius of the circle"],
						["segmentation", "number", "the segmentation of the circle"],
						["origo", "Coord", "the origo of the circle"]
					],
					"returns" : [
						["Coord[*]", "the result"]
					]
				},
				"GetRuledMesh" : {
					"description" : "Generates ruled mesh coordinates and polygons between two coordinate array. The two arrays should have the same length. The result is a coordinate array and a polygon array which contains indices for vertices.",
					"parameters" : [
						["aCoords", "Coord[*]", "the first coordinate array"],
						["bCoords", "Coord[*]", "the second coordinate array"],
						["segmentation", "number", "the segmentation of the mesh"],
						["vertices", "Coord[*]", "(out) the vertices of the mesh"],
						["polygons", "integer[*][4]", "(out) the polygons of the mesh"]
					]
				}
			},
			"classes" : {
				"Coord2D" : {
					"description" : "Represents a 2D coordinate.",
					"parameters" : [
						["x", "number", "the first component"],
						["y", "number", "the second component"]
					],
					"functions" : {
						"Set" : {
							"description" : "Sets the coordinate.",
							"parameters" : [
								["x", "number", "the first component"],
								["y", "number", "the second component"]
							]
						},
						"ToString" : {
							"description" : "Converts the coordinate values to string.",
							"returns" : [
								["string", "the string representation of the coordinate"]
							]
						},
						"Clone" : {
							"description" : "Clones the coordinate.",
							"returns" : [
								["Coord2D", "a cloned instance"]
							]
						}
					}
				},
				"PolarCoord" : {
					"description" : "Represents a 2D polar coordinate.",
					"parameters" : [
						["radius", "number", "the first component"],
						["angle", "number", "the second component"]
					],
					"functions" : {
						"Set" : {
							"description" : "Sets the coordinate.",
							"parameters" : [
								["radius", "number", "the first component"],
								["angle", "number", "the second component"]
							]
						},
						"ToString" : {
							"description" : "Converts the coordinate values to string.",
							"returns" : [
								["string", "the string representation of the coordinate"]
							]
						},
						"Clone" : {
							"description" : "Clones the coordinate.",
							"returns" : [
								["PolarCoord", "a cloned instance"]
							]
						}
					}
				},
				"Coord" : {
					"description" : "Represents a 3D coordinate.",
					"parameters" : [
						["x", "number", "the first component"],
						["y", "number", "the second component"],
						["z", "number", "the third component"]
					],
					"functions" : {
						"Set" : {
							"description" : "Sets the coordinate.",
							"parameters" : [
								["x", "number", "the first component"],
								["y", "number", "the second component"],
								["z", "number", "the third component"]
							]
						},
						"ToString" : {
							"description" : "Converts the coordinate values to string.",
							"returns" : [
								["string", "the string representation of the coordinate"]
							]
						},
						"Clone" : {
							"description" : "Clones the coordinate.",
							"returns" : [
								["Coord", "a cloned instance"]
							]
						}
					}
				},
				"SphericalCoord" : {
					"description" : "Represents a 3D spherical coordinate.",
					"parameters" : [
						["radius", "number", "the first component"],
						["theta", "number", "the second component"],
						["phi", "number", "the third component"]
					],
					"functions" : {
						"Set" : {
							"description" : "Sets the coordinate.",
							"parameters" : [
								["radius", "number", "the first component"],
								["theta", "number", "the second component"],
								["phi", "number", "the third component"]
							]
						},
						"ToString" : {
							"description" : "Converts the coordinate values to string.",
							"returns" : [
								["string", "the string representation of the coordinate"]
							]
						},
						"Clone" : {
							"description" : "Clones the coordinate.",
							"returns" : [
								["SphericalCoord", "a cloned instance"]
							]
						}
					}
				},
				"Vector2D" : {
					"description" : "Same as Coord2D."
				},
				"Vector" : {
					"description" : "Same as Coord."
				},
				"CoordSystem" : {
					"description" : "Represents coordinate system.",
					"parameters" : [
						["origo", "Coord", "origo"],
						["e1", "Vector", "first direction vector"],
						["e2", "Vector", "second direction vector"],
						["e3", "Vector", "third direction vector"]
					],
					"functions" : {
						"Set" : {
							"description" : "Sets the coordinate system.",
							"parameters" : [
								["origo", "Coord", "origo"],
								["e1", "Vector", "first direction vector"],
								["e2", "Vector", "second direction vector"],
								["e3", "Vector", "third direction vector"]
							]
						},
						"Clone" : {
							"description" : "Clones the coordinate system.",
							"returns" : [
								["CoordSystem", "a cloned instance"]
							]
						}
					}
				},
				"Sector2D" : {
					"description" : "Represents a 2D sector.",
					"parameters" : [
						["beg", "Coord2D", "the beginning coordinate"],
						["end", "Coord2D", "the ending coordinate"]
					],
					"functions" : {
						"Set" : {
							"description" : "Sets the sector.",
							"parameters" : [
								["beg", "Coord2D", "the beginning coordinate"],
								["end", "Coord2D", "the ending coordinate"]
							]
						},
						"Clone" : {
							"description" : "Clones the sector.",
							"returns" : [
								["Sector2D", "a cloned instance"]
							]
						}
					}
				},
				"Sector" : {
					"description" : "Represents a 3D sector.",
					"parameters" : [
						["beg", "Coord", "the beginning coordinate"],
						["end", "Coord", "the ending coordinate"]
					],
					"functions" : {
						"Set" : {
							"description" : "Sets the sector.",
							"parameters" : [
								["beg", "Coord", "the beginning coordinate"],
								["end", "Coord", "the ending coordinate"]
							]
						},
						"Clone" : {
							"description" : "Clones the sector.",
							"returns" : [
								["Sector", "a cloned instance"]
							]
						}
					}
				},
				"Line2D" : {
					"description" : "Represents a 2D infinite line.",
					"parameters" : [
						["start", "Coord2D", "the start point of the line"],
						["direction", "Vector2D", "the direction of the line"]
					],
					"functions" : {
						"Set" : {
							"description" : "Sets the line.",
							"parameters" : [
								["start", "Coord2D", "the start point of the line"],
								["direction", "Vector2D", "the direction of the line"]
							]
						},
						"Clone" : {
							"description" : "Clones the line.",
							"returns" : [
								["Line2D", "a cloned instance"]
							]
						}
					}
				},
				"Line" : {
					"description" : "Represents a 3D infinite line.",
					"parameters" : [
						["start", "Coord", "the start point of the line"],
						["direction", "Vector", "the direction of the line"]
					],
					"functions" : {
						"Set" : {
							"description" : "Sets the line.",
							"parameters" : [
								["start", "Coord", "the start point of the line"],
								["direction", "Vector", "the direction of the line"]
							]
						},
						"Clone" : {
							"description" : "Clones the line.",
							"returns" : [
								["Line", "a cloned instance"]
							]
						}
					}
				},
				"Transformation" : {
					"description" : "Represents a transformation matrix.",
					"functions" : {
						"GetMatrix" : {
							"description" : "Returns the matrix of the transformation.",
							"returns" : [
								["number[16]", "the matrix"]
							]
						},
						"SetMatrix" : {
							"description" : "Sets matrix of the transformation.",
							"parameters" : [
								["matrix", "number[16]", "the matrix"]
							]
						},
						"Append" : {
							"description" : "Adds a transformation to the matrix.",
							"parameters" : [
								["source", "Transformation", "the another transformation"]
							]
						},
						"Apply" : {
							"description" : "Apply transformation to a coordinate.",
							"parameters" : [
								["coord", "Coord", "the coordinate"]
							],
							"returns" : [
								["Coord", "the result"]
							]
						},
						"Clone" : {
							"description" : "Clones the transformation.",
							"returns" : [
								["Transformation", "a cloned instance"]
							]
						}
					}
				},
				"Plane" : {
					"description" : "Represents a plane.",
					"parameters" : [
						["a", "number", "the a component of plane equation"],
						["b", "number", "the b component of plane equation"],
						["c", "number", "the c component of plane equation"],
						["d", "number", "the d component of plane equation"]
					],
					"functions" : {
						"Set" : {
							"description" : "Sets the plane.",
							"parameters" : [
								["a", "number", "the a component of plane equation"],
								["b", "number", "the b component of plane equation"],
								["c", "number", "the c component of plane equation"],
								["d", "number", "the d component of plane equation"]
							]
						},
						"GetNormal" : {
							"description" : "Calculates the normal vector of the plane.",
							"returns" : [
								["Vector", "the result"]
							]
						},
						"Clone" : {
							"description" : "Clones the plane.",
							"returns" : [
								["Plane", "a cloned instance"]
							]
						}
					}
				},
				"Polygon2D" : {
					"description" : "Represents a 2D polygon.",
					"functions" : {
						"AddVertex" : {
							"description" : "Adds a vertex to the polygon.",
							"parameters" : [
								["x", "number", "the x coordinate of the vertex"],
								["y", "number", "the y coordinate of the vertex"]
							]
						},
						"GetVertex" : {
							"description" : "Returns the vertex with the given index.",
							"parameters" : [
								["index", "integer", "the index of the vertex"]
							],
							"returns" : [
								["Coord2D", "the vertex"]
							]
						},
						"SetVertex" : {
							"description" : "Modifies the coordinates of an existing vertex.",
							"parameters" : [
								["index", "integer", "the index of the vertex"],
								["x", "number", "the x coordinate of the vertex"],
								["y", "number", "the y coordinate of the vertex"]
							]
						},
						"VertexCount" : {
							"description" : "Returns the vertex count of the polygon.",
							"returns" : [
								["integer", "vertex count"]
							]
						},
						"Clear" : {
							"description" : "Makes the polygon empty."
						},
						"Clone" : {
							"description" : "Clones the polygon.",
							"returns" : [
								["Polygon2D", "a cloned instance"]
							]
						}
					}
				},
				"ContourPolygon2D" : {
					"description" : "Represents a 2D polygon with more contours.",
					"functions" : {
						"AddVertex" : {
							"description" : "Adds a vertex to a contour of the polygon.",
							"parameters" : [
								["contour", "integer", "the index of the contour"],
								["x", "number", "the x coordinate of the vertex"],
								["y", "number", "the y coordinate of the vertex"]
							]
						},
						"VertexCount" : {
							"description" : "Returns the vertex count of a contour of the polygon.",
							"parameters" : [
								["contour", "integer", "the index of the contour"]
							],
							"returns" : [
								["integer", "vertex count"]
							]
						},
						"GetVertex" : {
							"description" : "Returns the vertex of a contour with the given index.",
							"parameters" : [
								["contour", "integer", "the index of the contour"],
								["index", "integer", "the index of the vertex"]
							],
							"returns" : [
								["Coord2D", "the vertex"]
							]
						},
						"SetVertex" : {
							"description" : "Modifies the coordinates of an existing vertex of a contour.",
							"parameters" : [
								["contour", "integer", "the index of the contour"],
								["index", "integer", "the index of the vertex"],
								["x", "number", "the x coordinate of the vertex"],
								["y", "number", "the y coordinate of the vertex"]
							]
						},
						"AddContour" : {
							"description" : "Adds new contour to the polygon."
						},
						"ContourCount" : {
							"description" : "Returns the contour count of the polygon.",
							"returns" : [
								["integer", "contour count"]
							]
						},
						"GetContour" : {
							"description" : "Returns the contour with the given index.",
							"parameters" : [
								["contour", "integer", "the index of the contour"]
							],
							"returns" : [
								["Polygon2D", "the contour"]
							]
						},
						"Clear" : {
							"description" : "Makes the polygon empty."
						},
						"Clone" : {
							"description" : "Clones the polygon.",
							"returns" : [
								["ContourPolygon2D", "a cloned instance"]
							]
						}
					}
				},
				"Polygon" : {
					"description" : "Represents a 3D polygon.",
					"functions" : {
						"AddVertex" : {
							"description" : "Adds a vertex to the polygon.",
							"parameters" : [
								["x", "number", "the x coordinate of the vertex"],
								["y", "number", "the y coordinate of the vertex"],
								["z", "number", "the z coordinate of the vertex"]
							]
						},
						"GetVertex" : {
							"description" : "Returns the vertex with the given index.",
							"parameters" : [
								["index", "integer", "the index of the vertex"]
							],
							"returns" : [
								["Coord", "the vertex"]
							]
						},
						"SetVertex" : {
							"description" : "Modifies the coordinates of an existing vertex.",
							"parameters" : [
								["index", "integer", "the index of the vertex"],
								["x", "number", "the x coordinate of the vertex"],
								["y", "number", "the y coordinate of the vertex"],
								["z", "number", "the z coordinate of the vertex"]
							]
						},
						"VertexCount" : {
							"description" : "Returns the vertex count of the polygon.",
							"returns" : [
								["integer", "vertex count"]
							]
						},
						"Clear" : {
							"description" : "Makes the polygon empty."
						},
						"Clone" : {
							"description" : "Clones the polygon.",
							"returns" : [
								["Polygon", "a cloned instance"]
							]
						}
					}
				},
				"BSPNode" : {
					"description" : "Node of a BSP tree.",
					"functions" : {
						"IsLeaf" : {
							"description" : "Returns if the node is leaf.",
							"returns" : [
								["boolean", "the result"]
							]
						}
					}
				},
				"BSPTree" : {
					"description" : "Defines a BSP tree.",
					"functions" : {
						"AddPolygon" : {
							"description" : "Adds a polygon to the tree.",
							"parameters" : [
								["polygon", "Polygon", "the polygon"],
								["userData", "anything", "user data for polygon"]
							],
							"returns" : [
								["boolean", "success"]
							]
						},
						"Traverse" : {
							"description" : "Traverses the tree and calls a function on node found.",
							"parameters" : [
								["nodeFound", "function", "the callback function"]
							]
						},
						"TraverseNode" : {
							"description" : "Traverses a node and its children and calls a function on node found.",
							"parameters" : [
								["node", "BSPNode", "the node"],
								["nodeFound", "function", "the callback function"]
							]
						},
						"GetNodes" : {
							"description" : "Returns the nodes as an array.",
							"returns" : [
								["BSPNode[*]", "the result"]
							]
						},
						"GetNodes" : {
							"description" : "Count nodes.",
							"returns" : [
								["integer", "the result"]
							]
						},
						"AddPolygonToNode" : {
							"description" : "Adds a polygon to a node.",
							"parameters" : [
								["node", "BSPNode", "the node"],
								["polygon", "Polygon", "the polygon"],
								["userData", "anything", "user data for polygon"]
							],
							"returns" : [
								["boolean", "success"]
							]
						},
						"AddInsidePolygonsToNode" : {
							"description" : "Adds inside a polygons to a node.",
							"parameters" : [
								["node", "BSPNode", "the node"],
								["polygon", "Polygon[*]", "the polygons"],
								["userData", "anything", "user data for polygons"]
							]
						},
						"AddOutsidePolygonsToNode" : {
							"description" : "Adds outside a polygons to a node.",
							"parameters" : [
								["node", "BSPNode", "the node"],
								["polygon", "Polygon[*]", "the polygons"],
								["userData", "anything", "user data for polygons"]
							]
						},
						"GetNewNode" : {
							"description" : "Creates a new node.",
							"returns" : [
								["BSPNode", "the new node"]
							]
						}
					}
				}
			}
		},
		"Modeler" : {
			"functions" : {
				"HexColorToRGBComponents" : {
					"description" : "Converts hex color strings to RGB components.",
					"parameters" : [
						["hexColor", "string", "the hex color"]
					],
					"returns" : [
						["integer[3]", "the RGB components"]
					]
				},
				"HexColorToNormalizedRGBComponents" : {
					"description" : "Converts hex color strings to normalized (between 0.0 and 1.0) RGB components.",
					"parameters" : [
						["hexColor", "string", "the hex color"]
					],
					"returns" : [
						["number[3]", "the RGB components"]
					]
				},
				"HexColorToRGBColor" : {
					"description" : "Converts hex color strings to RGB color.",
					"parameters" : [
						["hexColor", "string", "the hex color string"]
					],
					"returns" : [
						["integer", "the RGB value"]
					]
				},
				"RGBComponentsToHexColor" : {
					"description" : "Converts RGB components to hex color.",
					"parameters" : [
						["red", "integer", "the red component"],
						["green", "integer", "the green component"],
						["blue", "integer", "the blue component"]
					],
					"returns" : [
						["integer", "the hex value"]
					]
				},
				"AddVertexToBody" : {
					"description" : "Adds a vertex to an existing body.",
					"parameters" : [
						["body", "Body", "the body"],
						["x", "number", "the x coordinate of the vertex"],
						["y", "number", "the y coordinate of the vertex"],
						["z", "number", "the z coordinate of the vertex"]
					]
				},
				"AddPolygonToBody" : {
					"description" : "Adds a polygon to an existing body.",
					"parameters" : [
						["body", "Body", "the body"],
						["vertices", "integer[*]", "array of vertex indices stored in the body"]
					]
				},
				"CalculateBodyVertexToPolygon" : {
					"description" : "Calculates an array which contains array of the connected polygon indices for all vertex indices in the body. The result is an array of array of polygon indices.",
					"parameters" : [
						["body", "Body", "the body"]
					],
					"returns" : [
						["integer[*][*]", "the result"]
					]
				},
				"CalculateBodyPolygonNormal" : {
					"description" : "Calculates a normal vector for a polygon stored in the body.",
					"parameters" : [
						["body", "Body", "the body"],
						["index", "integer", "the polygon index"]
					],
					"returns" : [
						["Vector", "the result"]
					]
				},
				"CalculateBodyPolygonNormals" : {
					"description" : "Calculates polygon normal vectors for all polygons stored in the body.",
					"parameters" : [
						["body", "Body", "the body"]
					],
					"returns" : [
						["Vector[*]", "the result"]
					]
				},
				"CalculateBodyVertexNormals" : {
					"description" : "Calculates vertex normal vectors for all vertices stored in the body. The result is an array of array with vertex normal vectors.",
					"parameters" : [
						["body", "Body", "the body"]
					],
					"returns" : [
						["Vector[*][*]", "the result"]
					]
				},
				"MakeBodyInsideOut" : {
					"description" : "Reverses all polygons orientation in the body.",
					"parameters" : [
						["body", "Body", "the body"]
					]
				},
				"SoftMoveBodyVertex" : {
					"description" : "Moves a vertex and its nearby vertices depending on gaussian function.",
					"parameters" : [
						["body", "Body", "the body"],
						["index", "integer", "the vertex index to move"],
						["radius", "number", "the radius of the movement"],
						["direction", "Vector", "the direction of the movement"],
						["distance", "number", "the distance of the movement"]
					]
				},
				"CalculatePolygonCentroid" : {
					"description" : "Calculates the centroid of a polygon stored in the body.",
					"parameters" : [
						["body", "Body", "the body"],
						["index", "integer", "the polygon index"]
					],
					"returns" : [
						["Coord", "the result"]
					]
				},
				"TriangulateWithCentroids" : {
					"description" : "Triangulates all polygons of the body by connecting all polygon vertices with the centroid vertex of the polygon.",
					"parameters" : [
						["body", "Body", "the body"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"TriangulateWithCentroids" : {
					"description" : "Triangulates all polygons of the body.",
					"parameters" : [
						["body", "Body", "the body"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateRandomMaterials" : {
					"description" : "Generates random materials for a body. A seed number can be specified.",
					"parameters" : [
						["body", "Body", "the body"],
						["materials", "Materials", "the materials"],
						["seed", "integer", "seed value"]
					]
				},
				"GetPolyEdgeStartVertex" : {
					"description" : "Returns the start vertex index of a polygon edge.",
					"parameters" : [
						["polyEdge", "PolyEdgeInfo", "the polygon edge info"],
						["adjacencyInfo", "AdjacencyInfo", "the adjacency info"]
					],
					"returns" : [
						["integer", "the result"]
					]
				},
				"GetPolyEdgeEndVertex" : {
					"description" : "Returns the end vertex index of a polygon edge.",
					"parameters" : [
						["polyEdge", "PolyEdgeInfo", "the polygon edge info"],
						["adjacencyInfo", "AdjacencyInfo", "the adjacency info"]
					],
					"returns" : [
						["integer", "the result"]
					]
				},
				"CalculateAdjacencyInfo" : {
					"description" : "Calculates the adjacency info for a body.",
					"parameters" : [
						["body", "Body", "the body"]
					],
					"returns" : [
						["AdjacencyInfo", "the result"]
					]
				},
				"IsSolidBody" : {
					"description" : "Returns if a given body is solid. It means that every edges of the body has two polygon neighbours.",
					"parameters" : [
						["body", "Body", "the body"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"CheckSolidBody" : {
					"description" : "Returns if a given body solid body is correct. It means that every edges of the body has two polygon neighbours, and there are no edge in the body which appears twice with the same direction.",
					"parameters" : [
						["body", "Body", "the body"]
					],
					"returns" : [
						["boolean", "the result"]
					]
				},
				"CalculatePlanarTextureCoord" : {
					"description" : "Calculates the planar texture coordinate for a coordinate.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["system", "CoordSystem", "the coordinate system"]
					],
					"returns" : [
						["Coord2D", "the result"]
					]
				},
				"CalculateCubicTextureCoord" : {
					"description" : "Calculates the cubic texture coordinate for a coordinate.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["normal", "Vector", "the normal vector for calculation"],
						["system", "CoordSystem", "the coordinate system"]
					],
					"returns" : [
						["Coord2D", "the result"]
					]
				},
				"CalculateCylindricalTextureCoord" : {
					"description" : "Calculates the cylindrical texture coordinate for a coordinate.",
					"parameters" : [
						["coord", "Coord", "the coordinate"],
						["normal", "Vector", "the normal vector for calculation"],
						["system", "CoordSystem", "the coordinate system"]
					],
					"returns" : [
						["Coord2D", "the result"]
					]
				},
				"CalculatePolygonPlanarTextureCoords" : {
					"description" : "Calculates the planar texture coordinates for a polygon.",
					"parameters" : [
						["body", "Body", "the body"],
						["index", "integer", "the polygon index"]
					],
					"returns" : [
						["Coord2D[*]", "the result"]
					]
				},
				"CalculatePolygonCubicTextureCoords" : {
					"description" : "Calculates the cubic texture coordinates for a polygon.",
					"parameters" : [
						["body", "Body", "the body"],
						["index", "integer", "the polygon index"],
						["normal", "Vector", "the normal vector for calculation"]
					],
					"returns" : [
						["Coord2D[*]", "the result"]
					]
				},
				"CalculatePolygonCylindricalTextureCoords" : {
					"description" : "Calculates the cylindrical texture coordinates for a polygon.",
					"parameters" : [
						["body", "Body", "the body"],
						["index", "integer", "the polygon index"],
						["normal", "Vector", "the normal vector for calculation"]
					],
					"returns" : [
						["Coord2D[*]", "the result"]
					]
				},
				"CalculateBodyPlanarTextureCoords" : {
					"description" : "Calculates the planar texture coordinates for a body.",
					"parameters" : [
						["body", "Body", "the body"]
					],
					"returns" : [
						["Coord2D[*][*]", "the result"]
					]
				},
				"CalculateBodyCubicTextureCoords" : {
					"description" : "Calculates the cubic texture coordinates for a body.",
					"parameters" : [
						["body", "Body", "the body"]
					],
					"returns" : [
						["Coord2D[*][*]", "the result"]
					]
				},
				"CalculateBodyCylindricalTextureCoords" : {
					"description" : "Calculates the cylindrical texture coordinates for a body.",
					"parameters" : [
						["body", "Body", "the body"]
					],
					"returns" : [
						["Coord2D[*][*]", "the result"]
					]
				},
				"CalculateBodyTextureCoords" : {
					"description" : "Calculates the texture coordinates for a body. The result is an array of arrays of texture coordinates.",
					"parameters" : [
						["body", "Body", "the body"]
					],
					"returns" : [
						["Coord2D[*][*]", "the result"]
					]
				},
				"CutBodyByPlane" : {
					"description" : "Cuts a body by a plane.",
					"parameters" : [
						["body", "Body", "the body"],
						["plane", "Plane", "the plane"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateRectangle" : {
					"description" : "Generates a rectangle.",
					"parameters" : [
						["xSize", "number", "x size"],
						["ySize", "number", "y size"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateCuboid" : {
					"description" : "Generates a cuboid.",
					"parameters" : [
						["xSize", "number", "x size"],
						["ySize", "number", "y size"],
						["zSize", "number", "z size"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateCuboidSides" : {
					"description" : "Generates the specified sides of a cuboid. The last parameter is a boolean array which defines sides visibility.",
					"parameters" : [
						["xSize", "number", "x size"],
						["ySize", "number", "y size"],
						["zSize", "number", "z size"],
						["sides", "boolean[]", "sides visibility"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateSegmentedRectangle" : {
					"description" : "Generates a segmented rectangle.",
					"parameters" : [
						["xSize", "number", "x size"],
						["ySize", "number", "y size"],
						["xSegmentation", "integer", "segmentation along x side"],
						["ySegmentation", "integer", "segmentation along y side"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateSegmentedCuboid" : {
					"description" : "Generates a segmented cuboid.",
					"parameters" : [
						["xSize", "number", "x size"],
						["ySize", "number", "y size"],
						["zSize", "number", "z size"],
						["segmentation", "integer", "segmentation of the sides"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateCircle" : {
					"description" : "Generates a circle.",
					"parameters" : [
						["radius", "number", "the radius of the circle"],
						["segmentation", "integer", "the segmentation of the circle"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateSphere" : {
					"description" : "Generates a sphere.",
					"parameters" : [
						["radius", "number", "the radius of the sphere"],
						["segmentation", "integer", "the segmentation of the sphere"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateTriangulatedSphere" : {
					"description" : "Generates a sphere from triangles.",
					"parameters" : [
						["radius", "number", "the radius of the sphere"],
						["iterations", "integer", "the iteration number"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateCylinder" : {
					"description" : "Generates a cylinder.",
					"parameters" : [
						["radius", "number", "the radius of the cylinder"],
						["height", "number", "the height of the cylinder"],
						["segmentation", "integer", "the segmentation of the top and bottom polygons"],
						["withTopAndBottom", "boolean", "generate top and bottom polygons"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GeneratePie" : {
					"description" : "Generates a pie.",
					"parameters" : [
						["radius", "number", "the radius of the pie"],
						["height", "number", "the height of the pie"],
						["angle", "number", "the angle of the pie"],
						["segmentation", "integer", "the segmentation of the top and bottom polygons"],
						["withTopAndBottom", "boolean", "generate top and bottom polygons"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateCone" : {
					"description" : "Generates a cone.",
					"parameters" : [
						["topRadius", "number", "the top radius of the cone"],
						["bottomRadius", "number", "the bottom radius of the cone"],
						["height", "number", "the height of the cone"],
						["segmentation", "integer", "the segmentation of the top and bottom polygons"],
						["withTopAndBottom", "boolean", "generate top and bottom polygons"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GeneratePrism" : {
					"description" : "Generates a prism defined by a polygon. The base polygon is an array of coordinates which will be offseted in the given direction.",
					"parameters" : [
						["basePolygon", "Coord[*]", "the base polygon"],
						["direction", "Vector", "the vector of the offset"],
						["height", "number", "the height of the prism"],
						["withTopAndBottom", "boolean", "generate top and bottom polygons"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateCurvedPrism" : {
					"description" : "Same as GeneratePrism, but curve groups can be defined for all sides.",
					"parameters" : [
						["basePolygon", "Coord[*]", "the base polygon"],
						["curveGroups", "integer[*]", "the curve groups"],
						["direction", "Vector", "the vector of the offset"],
						["height", "number", "the height of the prism"],
						["withTopAndBottom", "boolean", "generate top and bottom polygons"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GeneratePrismWithHole" : {
					"description" : "Generates a prism defined by a polygon. The polygon can contain null values which defines the end of the current contour. The holes have to be in reversed orientation than the main contour.",
					"parameters" : [
						["basePolygon", "Coord[*]", "the base polygon which can contain null values"],
						["direction", "Vector", "the vector of the offset"],
						["height", "number", "the height of the prism"],
						["withTopAndBottom", "boolean", "generate top and bottom polygons"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateCurvedPrismWithHole" : {
					"description" : "Same as GeneratePrismWithHole, but curve groups can be defined for all sides.",
					"parameters" : [
						["basePolygon", "Coord[*]", "the base polygon which can contain null values"],
						["direction", "Vector", "the vector of the offset"],
						["height", "number", "the height of the prism"],
						["withTopAndBottom", "boolean", "generate top and bottom polygons"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GeneratePrismShell" : {
					"description" : "Generates a prism with the given width of sides.",
					"parameters" : [
						["basePolygon", "Coord[*]", "the base polygon"],
						["direction", "Vector", "the vector of the offset"],
						["height", "number", "the height of the prism"],
						["width", "number", "the width of the prism sides"],
						["withTopAndBottom", "boolean", "generate top and bottom polygons"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateCylinderShell" : {
					"description" : "Generates a cylinder with the given width of sides.",
					"parameters" : [
						["radius", "number", "the radius of the cylinder"],
						["height", "number", "the height of the cylinder"],
						["width", "number", "the width of the cylinder sides"],
						["segmentation", "integer", "the segmentation of the top and bottom polygons"],
						["withTopAndBottom", "boolean", "generate top and bottom polygons"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateLineShell" : {
					"description" : "Generates a polyline with width and height.",
					"parameters" : [
						["basePolyLine", "Coord[*]", "the base polyline"],
						["direction", "Vector", "the vector of the offset"],
						["height", "number", "the height of the shell"],
						["width", "number", "the width of the shell"],
						["withStartAndEnd", "boolean", "generate start and end polygons"],
						["withTopAndBottom", "boolean", "generate top and bottom polygons"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateTorus" : {
					"description" : "Generates a torus.",
					"parameters" : [
						["outerRadius", "number", "the outer radius of the torus"],
						["innerRadius", "number", "the inner radius of the torus"],
						["outerSegmentation", "integer", "the outer segmentation of the torus"],
						["innerSegmentation", "integer", "the inner segmentation of the torus"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GeneratePolyTorus" : {
					"description" : "Generates a torus with a polygon cross section.",
					"parameters" : [
						["basePolygon", "Coord2D[*]", "the cross section polygon of the torus"],
						["outerRadius", "number", "the outer radius of the torus"],
						["outerSegmentation", "integer", "the outer segmentation of the torus"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateRuledFromSectors" : {
					"description" : "Generates a ruled surface between two sectors.",
					"parameters" : [
						["aSector", "Sector", "the first sector"],
						["bSector", "Sector", "the second sector"],
						["lineSegmentation", "integer", "the segmentation along sectors"],
						["meshSegmentation", "integer", "the segmentation along surface"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateGrid" : {
					"description" : "Generates a planar grid.",
					"parameters" : [
						["xSize", "number", "the x size"],
						["ySize", "number", "the y size"],
						["xSegmentation", "integer", "the segmentation along x axis"],
						["ySegmentation", "integer", "the segmentation along y axis"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateSquareGrid" : {
					"description" : "Generates a planar square grid.",
					"parameters" : [
						["size", "number", "the size"],
						["segmentation", "integer", "the segmentation"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateRuledFromSectorsWithHeight" : {
					"description" : "Generates a ruled surface with height between two sectors.",
					"parameters" : [
						["aSector", "Sector", "the first sector"],
						["bSector", "Sector", "the second sector"],
						["lineSegmentation", "integer", "the segmentation along sectors"],
						["meshSegmentation", "integer", "the segmentation along surface"],
						["isCurved", "boolean", "create smooth surfaces"],
						["height", "height", "the height"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateRuledFromCoords" : {
					"description" : "Generates a ruled surface between two coordinate arrays. The two arrays should have the same length.",
					"parameters" : [
						["aCoords", "Coord[*]", "the first coordinate array"],
						["bCoords", "Coord[*]", "the second coordinate array"],
						["meshSegmentation", "integer", "the segmentation along surface"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateRevolved" : {
					"description" : "Generates a revolved surface by rotating a polyline around a given axis. If the angle is 360 degree, it can generate top and bottom polygons.",
					"parameters" : [
						["polyLine", "Coord[*]", "the polyline"],
						["axis", "Sector", "the axis"],
						["angle", "number", "the angle"],
						["segmentation", "integer", "the segmentation"],
						["withTopAndBottom", "boolean", "generate top and bottom polygons"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateTube" : {
					"description" : "Generates a tube from a given array of polygons. All of the polygons should have same number of vertices.",
					"parameters" : [
						["basePolygons", "Coord[*][*]", "the array of polygons"],
						["withStartAndEnd", "boolean", "generate start and end polygons"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateFunctionSurface" : {
					"description" : "Generates the surface of a given function.",
					"parameters" : [
						["function3D", "function", "the callback function for get surface point"],
						["intervalMin", "Coord2D", "the minimum of the interval"],
						["intervalMax", "Coord2D", "the maximum of the interval"],
						["segmentation", "integer", "the segmentation"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateFunctionSurfaceSolid" : {
					"description" : "Generates the surface of a given function with a solid body.",
					"parameters" : [
						["function3D", "function", "the callback function for get surface point"],
						["intervalMin", "Coord2D", "the minimum of the interval"],
						["intervalMax", "Coord2D", "the maximum of the interval"],
						["segmentation", "integer", "the segmentation"],
						["isCurved", "boolean", "create smooth surfaces"],
						["bottomZ", "number", "the bottom z coordinate of the solid"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"ExplodeBodyToTriangles" : {
					"description" : "Explodes a body to triangles. The function calls callback functions on geometry start and end, and when a triangle is created.",
					"parameters" : [
						["body", "Body", "the body"],
						["materials", "Materials", "the materials"],
						["explodeData", "object", "the parameters and callback functions of explode"]
					],
					"returns" : [
						["boolean", "success"]
					]
				},
				"ExportBodyContentToStl" : {
					"description" : "Exports a body content to stl.",
					"parameters" : [
						["body", "Body", "the body"],
						["name", "string", "name the body"],
						["hasConvexPolygons", "boolean", "the body has only convex polygons"]
					],
					"returns" : [
						["string", "the result"]
					]
				},
				"ExportBodyToStl" : {
					"description" : "Exports a body to stl.",
					"parameters" : [
						["body", "Body", "the body"],
						["name", "string", "name the body"],
						["hasConvexPolygons", "boolean", "the body has only convex polygons"]
					],
					"returns" : [
						["string", "the result"]
					]
				},
				"ExportModelToStl" : {
					"description" : "Exports a model to stl.",
					"parameters" : [
						["model", "Model", "the model"],
						["name", "string", "name the model"],
						["hasConvexPolygons", "boolean", "the model has only convex polygons"]
					],
					"returns" : [
						["string", "the result"]
					]
				},
				"ExportBodyContentToObj" : {
					"description" : "Exports a body content to obj.",
					"parameters" : [
						["body", "Body", "the body"],
						["vertexOffset", "integer", "vertex index offset"],
						["normalOffset", "integer", "normal index offset"]
					],
					"returns" : [
						["string", "the result"]
					]
				},
				"ExportBodyToObj" : {
					"description" : "Exports a body to obj.",
					"parameters" : [
						["body", "Body", "the body"]
					],
					"returns" : [
						["string", "the result"]
					]
				},
				"ExportModelToObj" : {
					"description" : "Exports a model to obj.",
					"parameters" : [
						["model", "Model", "the model"]
					],
					"returns" : [
						["string", "the result"]
					]
				},
				"ExportMaterialsToGdl" : {
					"description" : "Exports a material container to gdl.",
					"parameters" : [
						["materials", "Materials", "the material container"]
					],
					"returns" : [
						["string", "the result"]
					]
				},
				"ExportBodyGeometryToGdl" : {
					"description" : "Exports a body geometry to gdl.",
					"parameters" : [
						["body", "Body", "the body"],
						["writeMaterials", "boolean", "write materials"]
					],
					"returns" : [
						["string", "the result"]
					]
				},
				"ExportBodyToGdl" : {
					"description" : "Exports a body to gdl.",
					"parameters" : [
						["body", "Body", "the body"],
						["materials", "Materials", "the material container"]
					],
					"returns" : [
						["string", "the result"]
					]
				},
				"ExportModelToGdl" : {
					"description" : "Exports a model to gdl.",
					"parameters" : [
						["model", "Model", "the model"],
						["materials", "Materials", "the material container"]
					],
					"returns" : [
						["string", "the result"]
					]
				}
			},
			"classes" : {
				"BodyVertex" : {
					"description" : "Represents a vertex of a 3D body. The vertex contains only its position as a 3D coordinate.",
					"parameters" : [
						["position", "Coord", "the position"]
					],
					"functions" : {
						"GetPosition" : {
							"description" : "Returns the position of the vertex.",
							"returns" : [
								["Coord", "the result"]
							]
						},
						"SetPosition" : {
							"description" : "Sets the position of the vertex.",
							"parameters" : [
								["position", "Coord", "the position"]
							]
						},
						"Clone" : {
							"description" : "Clones the vertex.",
							"returns" : [
								["BodyVertex", "a cloned instance"]
							]
						}
					}
				},
				"BodyPolygon" : {
					"description" : "Represents a polygon of a 3D body. The polygon contains vertex indices of vertices stored in its 3D body, material indices of materials defined outside of the body, and a curve group index which defines its normal vector calculation in case of smooth surfaces.",
					"parameters" : [
						["vertices", "integer[*]", "array of vertex indices stored in the body"]
					],
					"functions" : {
						"AddVertexIndex" : {
							"description" : "Adds a vertex index to the polygon.",
							"parameters" : [
								["index", "integer", "the vertex index"]
							]
						},
						"GetVertexIndex" : {
							"description" : "Returns the body vertex index at the given polygon vertex index.",
							"parameters" : [
								["index", "integer", "the polygon vertex index"]
							],
							"returns" : [
								["integer", "the stored vertex index"]
							]
						},
						"VertexIndexCount" : {
							"description" : "Returns the vertex count of the polygon.",
							"returns" : [
								["integer", "the result"]
							]
						},
						"HasMaterialIndex" : {
							"description" : "Returns if the polygon has a material index.",
							"returns" : [
								["boolean", "the result"]
							]
						},
						"GetMaterialIndex" : {
							"description" : "Returns the polygons material index.",
							"returns" : [
								["integer", "the result"]
							]
						},
						"SetMaterialIndex" : {
							"description" : "Sets the polygons material index.",
							"parameters" : [
								["material", "integer", "the material index"]
							]
						},
						"HasCurveGroup" : {
							"description" : "Returns if the polygon has a curve group index.",
							"returns" : [
								["boolean", "the result"]
							]
						},
						"GetCurveGroup" : {
							"description" : "Returns the polygons curve group index.",
							"returns" : [
								["integer", "the result"]
							]
						},
						"SetCurveGroup" : {
							"description" : "Sets the polygons curve group index.",
							"parameters" : [
								["group", "integer", "the curve group index"]
							]
						},
						"InheritAttributes" : {
							"description" : "Inherits attributes (material and curve group index) from an another polygon.",
							"parameters" : [
								["source", "BodyPolygon", "the source polygon"]
							]
						},
						"Clone" : {
							"description" : "Clones the polygon.",
							"returns" : [
								["BodyPolygon", "a cloned instance"]
							]
						}
					}
				},
				"Body" : {
					"description" : "Represents a 3D body. The body contains vertices, polygons, and a texture coordinate system.",
					"functions" : {
						"AddVertex" : {
							"description" : "Adds a vertex to the body.",
							"parameters" : [
								["vertex", "BodyVertex", "the vertex"]
							],
							"returns" : [
								["integer", "the index of the newly added vertex"]
							]
						},
						"AddPolygon" : {
							"description" : "Adds a polygon to the body.",
							"parameters" : [
								["polygon", "BodyPolygon", "the polygon"]
							],
							"returns" : [
								["integer", "the index of the newly added polygon"]
							]
						},
						"GetVertex" : {
							"description" : "Returns the vertex at the given index.",
							"parameters" : [
								["index", "integer", "the vertex index"]
							],
							"returns" : [
								["BodyVertex", "the result"]
							]
						},
						"GetVertexPosition" : {
							"description" : "Returns the position of the vertex at the given index.",
							"parameters" : [
								["index", "integer", "the vertex index"]
							],
							"returns" : [
								["Coord", "the result"]
							]
						},
						"SetVertexPosition" : {
							"description" : "Sets the position of the vertex at the given index.",
							"parameters" : [
								["index", "integer", "the vertex index"],
								["position", "Coord", "the new position"]
							]
						},
						"VertexCount" : {
							"description" : "Returns the vertex count of the body.",
							"returns" : [
								["integer", "the result"]
							]
						},
						"GetPolygon" : {
							"description" : "Returns the polygon at the given index.",
							"parameters" : [
								["index", "integer", "the polygon index"]
							],
							"returns" : [
								["BodyPolygon", "the result"]
							]
						},
						"PolygonCount" : {
							"description" : "Returns the polygon count of the body.",
							"returns" : [
								["integer", "the result"]
							]
						},
						"SetPolygonsMaterialIndex" : {
							"description" : "Sets the material index for all polygons in the body.",
							"parameters" : [
								["material", "integer", "the material index"]
							]
						},
						"SetPolygonsCurveGroup" : {
							"description" : "Sets the curve group index for all polygons in the body.",
							"parameters" : [
								["group", "integer", "the curve group index"]
							]
						},
						"GetTextureProjectionType" : {
							"description" : "Returns the texture projection type of the body.",
							"returns" : [
								["string", "the result"]
							]
						},
						"SetTextureProjectionType" : {
							"description" : "Sets the texture projection type of the body.",
							"parameters" : [
								["projection", "string", "the new texture projection type"]
							]
						},
						"GetTextureProjectionCoords" : {
							"description" : "Returns the texture projection coordinate system of the body.",
							"returns" : [
								["CoordSystem", "the result"]
							]
						},
						"SetTextureProjectionCoords" : {
							"description" : "Sets the texture projection coordinate system of the body.",
							"parameters" : [
								["coords", "CoordSystem", "the new texture projection coordinate system"]
							]
						},
						"SetPlanarTextureProjection" : {
							"description" : "Sets the texture projection to planar with the given parameters.",
							"parameters" : [
								["origo", "Coord", "origo of the projection"],
								["xDirection", "Vector", "x direction (start point along other axis) of the projection"],
								["zDirection", "Vector", "z direction (normal vector) of the projection"]
							]
						},
						"SetCubicTextureProjection" : {
							"description" : "Sets the texture projection to cubic with the given parameters.",
							"parameters" : [
								["origo", "Coord", "origo of the projection"],
								["xDirection", "Vector", "x direction (edge of the cube) of the projection"],
								["yDirection", "Vector", "y direction (edge of the cube) of the projection"],
								["zDirection", "Vector", "z direction (edge of the cube) of the projection"]
							]
						},
						"SetCylindricalTextureProjection" : {
							"description" : "Sets the texture projection to cylindrical with the given parameters.",
							"parameters" : [
								["origo", "Coord", "origo of the projection"],
								["radius", "number", "radius of the cylinder"],
								["xDirection", "Vector", "x direction (start point along perimeter) of the projection"],
								["zDirection", "Vector", "z direction (normal vector) of the projection"]
							]
						},
						"Transform" : {
							"description" : "Transforms the body.",
							"parameters" : [
								["transformation", "Transformation", "the transformation"]
							]
						},
						"GetBoundingBox" : {
							"description" : "Returns the bounding box of the body.",
							"returns" : [
								["Coord[2]", "the minimum and maximum coordinate of the bounding box"]
							]
						},
						"GetCenter" : {
							"description" : "Returns the center of the bounding box of the body.",
							"returns" : [
								["Coord", "the result"]
							]
						},
						"GetBoundingSphereRadius" : {
							"description" : "Returns the radius of the bounding sphere of the body.",
							"returns" : [
								["number", "the result"]
							]
						},
						"OffsetToOrigo" : {
							"description" : "Offsets the body to the origo."
						},
						"Merge" : {
							"description" : "Merges an existing body to the body.",
							"parameters" : [
								["body", "Body", "the body to merge"]
							]
						},
						"Clear" : {
							"description" : "Makes the body empty."
						}
					}
				},
				"Model" : {
					"description" : "Represents a 3D model. The model contains bodies.",
					"functions" : {
						"AddBody" : {
							"description" : "Adds a body to the model.",
							"parameters" : [
								["body", "Body", "the body"]
							],
							"returns" : [
								["integer", "the index of the newly added body"]
							]
						},
						"GetBody" : {
							"description" : "Returns the stored body with the given index.",
							"parameters" : [
								["index", "integer", "the index of the body"]
							],
							"returns" : [
								["Body", "the result"]
							]
						},
						"BodyCount" : {
							"description" : "Returns the body count of the model.",
							"returns" : [
								["integer", "the result"]
							]
						},
						"VertexCount" : {
							"description" : "Returns the vertex count of the model.",
							"returns" : [
								["integer", "the result"]
							]
						},
						"PolygonCount" : {
							"description" : "Returns the polygon count of the model.",
							"returns" : [
								["integer", "the result"]
							]
						}
					}
				},
				"Light" : {
					"description" : "Defines a directional light. The parameter structure can contain the following values: ambient, diffuse, specular, direction.",
					"parameters" : [
						["parameters", "object", "parameters of the light"]
					]
				},
				"Material" : {
					"description" : "Defines a material. The parameter structure can contain the following values: ambient, diffuse, specular, shininess, opacity, texture, textureWidth, textureHeight.",
					"parameters" : [
						["parameters", "object", "parameters of the material"]
					]
				},
				"Materials" : {
					"description" : "Defines a material container.",
					"functions" : {
						"GetMaterial" : {
							"description" : "Returns a material from the container.",
							"parameters" : [
								["index", "integer", "the index"]
							],
							"returns" : [
								["Material", "the result"]
							]
						},
						"AddMaterial" : {
							"description" : "Adds a material to the container.",
							"parameters" : [
								["material", "Material", "the material"]
							]
						},
						"GetDefaultMaterial" : {
							"description" : "Returns the default material from the container. It is always exists.",
							"returns" : [
								["Material", "the result"]
							]
						},
						"Count" : {
							"description" : "Returns the material count of the container.",
							"returns" : [
								["integer", "the result"]
							]
						}
					}
				},
				"VertInfo" : {
					"description" : "Contains adjacency information for a body vertex. Contains arrays with indices of connected edge and polygon info."
				},
				"EdgeInfo" : {
					"description" : "Contains adjacency information for a body edge. Contains indices of connected vertex and polygon info."
				},
				"PolyEdgeInfo" : {
					"description" : "Contains adjacency information for a body polygon edge. Contains an index of an existing edge, and a flag which defines its direction."
				},
				"PgonInfo" : {
					"description" : "Contains adjacency information for a body polygon. Contains arrays with indices of connected vertex and poly edge info."
				},
				"AdjacencyInfo" : {
					"description" : "Contains adjacency information for a body. Contains arrays with vertex, edge and polygon info."
				},
				"Camera" : {
					"description" : "Represents a camera.",
					"parameters" : [
						["eye", "Coord", "the eye position"],
						["center", "Coord", "the center position"],
						["up", "Vector", "the up vector"],
						["fieldOfView", "number", "field of view in degree"],
						["nearClippingPlane", "number", "near clipping plane distance"],
						["farClippingPlane", "number", "far clipping plane distance"]
					],
					"functions" : {
						"Set" : {
							"description" : "Sets the camera.",
							"parameters" : [
								["eye", "Coord", "the eye position"],
								["center", "Coord", "the center position"],
								["up", "Vector", "the up vector"],
								["fieldOfView", "number", "field of view in degree"],
								["nearClippingPlane", "number", "near clipping plane distance"],
								["farClippingPlane", "number", "far clipping plane distance"]
							]
						},
						"Clone" : {
							"description" : "Clones the camera.",
							"returns" : [
								["Camera", "a cloned instance"]
							]
						}
					}
				}
			}
		},
		"Import" : {
		},
		"Extras" : {
			"functions" : {
				"GenerateSolidWithRadius" : {
					"description" : "Generates a special solid with the given radius.",
					"parameters" : [
						["solidName", "string", "the name of the solid"],
						["radius", "number", "the radius of the solid"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateTetrahedron" : {
					"description" : "Generates a tetrahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateHexahedron" : {
					"description" : "Generates a hexahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateOctahedron" : {
					"description" : "Generates an octahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateDodecahedron" : {
					"description" : "Generates a dodecahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateIcosahedron" : {
					"description" : "Generates an icosahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateTruncatedTetrahedron" : {
					"description" : "Generates a truncated tetrahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateCuboctahedron" : {
					"description" : "Generates a cuboctahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateTruncatedCube" : {
					"description" : "Generates a truncated cube.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateTruncatedOctahedron" : {
					"description" : "Generates a truncated octahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateRhombicuboctahedron" : {
					"description" : "Generates a rhombicuboctahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateTruncatedCuboctahedron" : {
					"description" : "Generates a truncated cuboctahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateSnubCube" : {
					"description" : "Generates a snub cube.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateIcosidodecahedron" : {
					"description" : "Generates an icosidodecahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateTruncatedDodecahedron" : {
					"description" : "Generates a truncated dodecahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateTruncatedIcosahedron" : {
					"description" : "Generates a truncated icosahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateRhombicosidodecahedron" : {
					"description" : "Generates a rhombicosidodecahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateTruncatedIcosidodecahedron" : {
					"description" : "Generates a truncated icosidodecahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateSnubDodecahedron" : {
					"description" : "Generates a snub dodecahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"AddCumulatedPolygonToBody" : {
					"description" : "Adds polygons to a body by cumulating the original polygons vertex index array.",
					"parameters" : [
						["body", "Body", "the body"],
						["vertices", "integer[*]", "the vertices of the original polygon"],
						["height", "number", "the height of the cumulation"]
					]
				},
				"GenerateCumulatedTetrahedron" : {
					"description" : "Generates a cumulated tetrahedron.",
					"parameters" : [
						["pyramidUnitHeight", "number", "the unit height of pyramids"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateCumulatedHexahedron" : {
					"description" : "Generates a cumulated hexahedron.",
					"parameters" : [
						["pyramidUnitHeight", "number", "the unit height of pyramids"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateCumulatedOctahedron" : {
					"description" : "Generates a cumulated octahedron.",
					"parameters" : [
						["pyramidUnitHeight", "number", "the unit height of pyramids"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateCumulatedDodecahedron" : {
					"description" : "Generates a cumulated dodecahedron.",
					"parameters" : [
						["pyramidUnitHeight", "number", "the unit height of pyramids"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateCumulatedIcosahedron" : {
					"description" : "Generates a cumulated icosahedron.",
					"parameters" : [
						["pyramidUnitHeight", "number", "the unit height of pyramids"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateTetrakisHexahedron" : {
					"description" : "Generates a tetrakis hexahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateRhombicDodecahedron" : {
					"description" : "Generates a rhombic dodecahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GeneratePentakisDodecahedron" : {
					"description" : "Generates a pentakis dodecahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateSmallStellatedDodecahedron" : {
					"description" : "Generates a small stellated dodecahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateGreatDodecahedron" : {
					"description" : "Generates a great dodecahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateSmallTriambicIcosahedron" : {
					"description" : "Generates a small triambic icosahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateGreatStellatedDodecahedron" : {
					"description" : "Generates a great stellated dodecahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateSmallTriakisOctahedron" : {
					"description" : "Generates a small triakis octahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateStellaOctangula" : {
					"description" : "Generates a stella octangula.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateTriakisTetrahedron" : {
					"description" : "Generates a triakis tetrahedron.",
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateLegoBrick" : {
					"description" : "Generates a lego brick.",
					"parameters" : [
						["rows", "integer", "the row count"],
						["columns", "integer", "the columns count"],
						["isLarge", "boolean", "the brick is large"],
						["hasTopCylinders", "boolean", "the brick has top cylinders"],
						["hasBottomCylinders", "boolean", "the brick has bottom cylinders"],
						["segmentation", "integer", "the segmentation of cylinders"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateConvexHullBody" : {
					"description" : "Generates a convex hull body from the given coordinates.",
					"parameters" : [
						["coord", "Coord[*]", "the coordinates"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateSuperShape" : {
					"description" : "Generates a supershape.",
					"parameters" : [
						["parameters", "12 numbers", "the supershape parameters"],
						["segmentation", "integer", "the segmentation"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"OrderPolygons" : {
					"description" : "Order body polygons from front to back depending on the eye position.",
					"parameters" : [
						["body", "Body", "the body"],
						["eye", "Coord", "the camera eye position"],
						["center", "Coord", "the camera center position"]
					],
					"returns" : [
						["integer[]", "the ordered polygon indices"]
					]
				},
				"DrawProjectedBody" : {
					"description" : "Draws a projected body.",
					"parameters" : [
						["body", "Body", "the body"],
						["materials", "Materials", "the material container"],
						["camera", "Camera", "the camera for projection"],
						["drawMode", "string", "draw mode ('HiddenLinePainter', 'HiddenLineFrontFacing' or 'Wireframe')"],
						["needClear", "boolean", "clear the display before draw"],
						["drawer", "drawer object", "the drawer object"]
					]
				},
				"CatmullClarkSubdivisionOneIteration" : {
					"description" : "Runs one iteration of Catmull-Clark subdivision on a body.",
					"parameters" : [
						["body", "Body", "the body"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"CatmullClarkSubdivision" : {
					"description" : "Runs multiple iterations of Catmull-Clark subdivision on a body.",
					"parameters" : [
						["body", "Body", "the body"],
						["iterations", "integer", "the iteration number"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"SvgToModel" : {
					"description" : "Converts an svg objects rect, path and polygon elements to a body.",
					"parameters" : [
						["svgObject", "html svg element", "the svg element"],
						["height", "number", "the height of the result body"],
						["segmentLength", "number", "the maximum length of curved segments"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"AddBodyToBSPTree" : {
					"description" : "Adds a body to a BSP tree.",
					"parameters" : [
						["body", "Body", "the body"],
						["bspTree", "BSPTree", "the BSP tree"],
						["id", "anything", "the id for added polygons"]
					]
				},
				"BooleanOperation" : {
					"description" : "Makes a boolean operation on the given bodies.",
					"parameters" : [
						["operation", "string", "the operation ('Union', 'Difference', or 'Intersection')"],
						["aBody", "Body", "the first body"],
						["bBody", "Body", "the second body"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateSurface" : {
					"description" : "Generates a parametric surface.",
					"parameters" : [
						["xRange", "number[2]", "the from-to range on x axis"],
						["yRange", "number[2]", "the from-to range on y axis"],
						["xSegmentation", "integer", "the segmentation along the x axis"],
						["ySegmentation", "integer", "the segmentation along the y axis"],
						["useTriangles", "boolean", "generate triangles instead of quadrangles"],
						["isCurved", "boolean", "create smooth surfaces"],
						["getPointCallback", "function", "callback function which returns the point for a position"],
						["userData", "anything", "user data which will be passed to getPointCallback"]
					],
					"returns" : [
						["Body", "the result"]
					]
				},
				"GenerateBezierSurface" : {
					"description" : "Generates a bezier surface base on the given control points.",
					"parameters" : [
						["surfaceControlPoints", "SurfaceControlPoints", "the control points"],
						["xSegmentation", "integer", "the segmentation along the x axis"],
						["ySegmentation", "integer", "the segmentation along the y axis"],
						["isCurved", "boolean", "create smooth surfaces"]
					],
					"returns" : [
						["Body", "the result"]
					]
				}
			},
			"classes" : {
				"LegoDimensions" : {
					"description" : "Class that contains lego brick dimensions."
				},
				"CanvasDrawer" : {
					"description" : "Represents an object which can draw primitives to a canvas.",
					"parameters" : [
						["canvas", "html canvas element", "the destination element"]
					],
					"functions" : {
						"GetWidth" : {
							"description" : "Returns the width of the target.",
							"returns" : [
								["integer", "the result"]
							]
						},
						"GetHeight" : {
							"description" : "Returns the height of the target.",
							"returns" : [
								["integer", "the result"]
							]
						},
						"BeginPath" : {
							"description" : "Begins a path."
						},
						"EndPath" : {
							"description" : "Ends a path."
						},
						"Clear" : {
							"description" : "Clears the target."
						},
						"DrawLine" : {
							"description" : "Draws a line to the target.",
							"parameters" : [
								["from", "Coord2D", "the start of the line"],
								["to", "Coord2D", "the end of the line"]
							]
						},
						"DrawPolygon" : {
							"description" : "Draws a polygon to the target.",
							"parameters" : [
								["polygon", "Polygon2D", "the polygon"],
								["color", "string", "the hex color string"]
							]
						}
					}
				},
				"SVGDrawer" : {
					"description" : "Represents an object which can draw primitives to an svg.",
					"parameters" : [
						["svgObject", "html svg element", "the destination element"]
					],
					"functions" : {
						"GetWidth" : {
							"description" : "Returns the width of the target.",
							"returns" : [
								["integer", "the result"]
							]
						},
						"GetHeight" : {
							"description" : "Returns the height of the target.",
							"returns" : [
								["integer", "the result"]
							]
						},
						"BeginPath" : {
							"description" : "Begins a path."
						},
						"EndPath" : {
							"description" : "Ends a path."
						},
						"Clear" : {
							"description" : "Clears the target."
						},
						"DrawLine" : {
							"description" : "Draws a line to the target.",
							"parameters" : [
								["from", "Coord2D", "the start of the line"],
								["to", "Coord2D", "the end of the line"]
							]
						},
						"DrawPolygon" : {
							"description" : "Draws a polygon to the target.",
							"parameters" : [
								["polygon", "Polygon2D", "the polygon"],
								["color", "string", "the hex color string"]
							]
						}
					}
				},
				"BSPPolygonUserData" : {
					"description" : "Class that contains user data for polygons in BSP tree."
				},
				"SurfaceControlPoints" : {
					"description" : "Represents control points for surface generation.",
					"parameters" : [
						["n", "integer", "the first dimension"],
						["m", "integer", "the second dimension"]
					],
					"functions" : {
						"GetNValue" : {
							"description" : "Returns the n value.",
							"returns" : [
								["integer", "the result"]
							]
						},
						"GetMValue" : {
							"description" : "Returns the m value.",
							"returns" : [
								["integer", "the result"]
							]
						},
						"GetControlPoint" : {
							"description" : "Returns a control point.",
							"parameters" : [
								["i", "integer", "the first dimension"],
								["j", "integer", "the second dimension"]
							],
							"returns" : [
								["Coord", "the result"]
							]
						},
						"InitPlanar" : {
							"description" : "Inits planar control points.",
							"parameters" : [
								["xSize", "number", "the x size"],
								["xSize", "number", "the y size"]
							]
						}
					}
				}
			}
		},
		"Renderer" : {
		},
		"Viewer" : {
		},
		"Three" : {
		}
	}
}
